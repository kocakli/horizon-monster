{"ast":null,"code":"var _jsxFileName = \"/Users/oguzhankocakli/Documents/GitHub/horizon-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'oguzhankocakli';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // Actions\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderContent = () => {\n    /*\n     * Scenario #1\n     */\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\",\n          alt: \"Monty Python Gif\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet To Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this);\n      /*\n       * Scenario #2\n       */\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }, this);\n      /*\n      * If there is a connected wallet and characterNFT, it's time to battle!\n      */\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }, this);\n    }\n  };\n  /*\n   * Implement your connectWallet method here\n   */\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n      /*\n       * Fancy method to request access to account.\n       */\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const checkNetwork = async () => {\n      try {\n        if (window.ethereum.networkVersion !== '4') {\n          alert(\"Please connect to Rinkeby!\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    /*\n     * Anytime our component mounts, make sure to immiediately set our loading state\n     */\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const characterNFT = await gameContract.checkIfUserHasNFT();\n\n      if (characterNFT.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n      /*\n       * Once we are done with all the fetching, set loading state to false\n       */\n\n\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n    };\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u2694\\uFE0F Metaverse Slayer \\u2694\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Team up to protect the Metaverse!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4d1/v0v+sQ55nWtyL/pUhMx0n98=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/oguzhankocakli/Documents/GitHub/horizon-game/src/App.js"],"names":["React","useEffect","useState","CONTRACT_ADDRESS","transformCharacterData","SelectCharacter","myEpicGame","ethers","Arena","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","error","renderContent","connectWalletAction","alert","checkNetwork","networkVersion","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","checkIfUserHasNFT","name","txn","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\n\n\n\n\n// Constants\nconst TWITTER_HANDLE = 'oguzhankocakli';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // Render Methods\nconst renderContent = () => {\n  /*\n   * Scenario #1\n   */\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n          src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n          alt=\"Monty Python Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n    /*\n     * Scenario #2\n     */\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    /*\n\t* If there is a connected wallet and characterNFT, it's time to battle!\n\t*/\n  } else if (currentAccount && characterNFT) {\n    return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n  }\n};\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const checkNetwork = async () => {\n      try { \n        if (window.ethereum.networkVersion !== '4') {\n          alert(\"Please connect to Rinkeby!\")\n        }\n      } catch(error) {\n        console.log(error)\n      }\n    }\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    /*\n     * Anytime our component mounts, make sure to immiediately set our loading state\n     */\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const characterNFT = await gameContract.checkIfUserHasNFT();\n      if (characterNFT.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n  \n      /*\n       * Once we are done with all the fetching, set loading state to false\n       */\n      setIsLoading(false);\n    };\n  \n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n    };\n  \n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {/* This is where our button and image code used to be!\n         *\tRemember we moved it into the render method.\n         */}\n        {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
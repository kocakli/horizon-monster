{"ast":null,"code":"var _jsxFileName = \"/Users/oguzhankocakli/Documents/GitHub/horizon-game/src/Components/SelectCharacter/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = _ref => {\n  _s();\n\n  let {\n    setCharacterNFT\n  } = _ref;\n\n  // Actions\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n\n      setMintingCharacter(false);\n    }\n  }; // Render Methods\n\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"character-mint-button\",\n      onClick: mintCharacterNFTAction(index),\n      children: `Mint ${character.name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this));\n\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false); // UseEffect\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData));\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n    /*\n       * Add a callback method that will fire when this event is received\n       */\n\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      /*\n       * Setup NFT Minted Listener\n       */\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"select-character-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mint Your Hero. Choose wisely.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this), characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-grid\",\n      children: renderCharacters()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), mintingCharacter && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"indicator\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Minting In Progress...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\",\n        alt: \"Minting loading indicator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SelectCharacter, \"YAIluGJumFDmJAPdOeDT94pTudM=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["/Users/oguzhankocakli/Documents/GitHub/horizon-game/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","ethers","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","SelectCharacter","setCharacterNFT","mintCharacterNFTAction","characterId","gameContract","setMintingCharacter","console","log","mintTxn","mintCharacterNFT","wait","error","warn","renderCharacters","characters","map","character","index","name","imageURI","setCharacters","setGameContract","mintingCharacter","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","getCharacters","charactersTxn","getAllDefaultCharacters","characterData","onCharacterMint","sender","tokenId","characterIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\n\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n         * Show our loading indicator\n         */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(mintTxn);\n        /*\n         * Hide our loading indicator when minting is finished\n         */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n       * If there is a problem, hide the loading indicator as well\n       */\n      setMintingCharacter(false);\n    }\n  };\n  // Render Methods\nconst renderCharacters = () =>\ncharacters.map((character, index) => (\n  <div className=\"character-item\" key={character.name}>\n    <div className=\"name-container\">\n      <p>{character.name}</p>\n    </div>\n    <img src={character.imageURI} alt={character.name} />\n    <button\n      type=\"button\"\n      className=\"character-mint-button\"\n      onClick={mintCharacterNFTAction(index)}\n      >{`Mint ${character.name}`}</button>\n  </div>\n));\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // UseEffect\nuseEffect(() => {\n  const { ethereum } = window;\n\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    /*\n     * This is the big difference. Set our gameContract in state.\n     */\n    setGameContract(gameContract);\n  } else {\n    console.log('Ethereum object not found');\n  }\n}, []);\nuseEffect(() => {\n  const getCharacters = async () => {\n    try {\n      console.log('Getting contract characters to mint');\n\n      const charactersTxn = await gameContract.getAllDefaultCharacters();\n      console.log('charactersTxn:', charactersTxn);\n\n      const characters = charactersTxn.map((characterData) =>\n        transformCharacterData(characterData)\n      );\n\n      setCharacters(characters);\n    } catch (error) {\n      console.error('Something went wrong fetching characters:', error);\n    }\n  };\n/*\n   * Add a callback method that will fire when this event is received\n   */\nconst onCharacterMint = async (sender, tokenId, characterIndex) => {\n  console.log(\n    `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n  );\n\n  /*\n   * Once our character NFT is minted we can fetch the metadata from our contract\n   * and set it in state to move onto the Arena\n   */\n  if (gameContract) {\n    const characterNFT = await gameContract.checkIfUserHasNFT();\n    console.log('CharacterNFT: ', characterNFT);\n    setCharacterNFT(transformCharacterData(characterNFT));\n  }\n};\n\nif (gameContract) {\n  getCharacters();\n\n  /*\n   * Setup NFT Minted Listener\n   */\n  gameContract.on('CharacterNFTMinted', onCharacterMint);\n}\n\nreturn () => {\n  /*\n   * When your component unmounts, let;s make sure to clean up this listener\n   */\n  if (gameContract) {\n    gameContract.off('CharacterNFTMinted', onCharacterMint);\n  }\n};\n}, [gameContract]);\n\nreturn (\n  <div className=\"select-character-container\">\n    <h2>Mint Your Hero. Choose wisely.</h2>\n    {characters.length > 0 && (\n      <div className=\"character-grid\">{renderCharacters()}</div>\n    )}\n    {/* Only show our loading state if mintingCharacter is true */}\n    {mintingCharacter && (\n      <div className=\"loading\">\n        <div className=\"indicator\">\n          <LoadingIndicator />\n          <p>Minting In Progress...</p>\n        </div>\n        <img\n          src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n          alt=\"Minting loading indicator\"\n        />\n      </div>\n    )}\n  </div>\n);\n};\n\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}